
name: Chisel CI


on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, develop, feature/action ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  # clean:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
    # steps:

    #   - name: cleanCommit
    #     run: |
    #       cd /home/runner/work/RiftCore/
    #       git clone https://github.com/whutddk/RiftCore/
    #       cd RiftCore/
    #       git fetch --all
    #       git checkout gh-pages
    #       git reset --hard 4e5a
 
    #   - name: cleanPush
    #     uses: ad-m/github-push-action@master
    #     with:
    #       github_token: ${{ secrets.GITHUB_TOKEN }}
    #       branch: gh-pages
    #       force: true
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # needs: clean
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
          
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Compile
        run: |
          git submodule update --init --recursive
          make compile



      - name: RISCV GCC
        if: steps.cache-tools-chian.outputs.cache-hit != 'true'
        run: |
          cd ~
          pwd
          mkdir ~/RISCV
          export RISCV=~/RISCV
          wget https://static.dev.sifive.com/dev-tools/riscv64-unknown-elf-gcc-8.3.0-2020.04.0-x86_64-linux-ubuntu14.tar.gz
          tar -x -f riscv64-unknown-elf-gcc-8.3.0-2020.04.0-x86_64-linux-ubuntu14.tar.gz --strip-components=1 -C $RISCV
          export PATH=$PATH:$RISCV/bin


      - name: Verilator
        if: steps.cache-tools-chian.outputs.cache-hit != 'true'
        run: |
          cd ~
          sudo apt-get install verilator


      - name: Clone Test Repository
        if: steps.cache-tools-chian.outputs.cache-hit != 'true'
        run: |
          export RISCV=~/RISCV
          export PATH=$PATH:$RISCV/bin
          cd ~
          git clone https://github.com/riscv/riscv-tests.git
          cd ./riscv-tests
          git checkout master
          git submodule update --init --recursive


      - name: Compile ISA
        if: steps.cache-tools-chian.outputs.cache-hit != 'true'
        run: |
          export RISCV=~/RISCV
          export PATH=$PATH:$RISCV/bin
          cd ~/riscv-tests
          cd ./isa
          rm Makefile
          cp /home/runner/work/Rift2Core/Rift2Core/tb/isa/Makefile ./Makefile
          make

      # - name: Compile Dhrystone
      #   if: steps.cache-tools-chian.outputs.cache-hit != 'true'
      #   run: |
      #     export RISCV=~/RISCV
      #     export PATH=$PATH:$RISCV/bin
      #     cd ~/riscv-tests/benchmarks
      #     rm Makefile
      #     cp /home/runner/work/RiftCore/RiftCore/tb/dhrystone/Makefile ./
      #     cd ./common
      #     rm crt.S syscalls.c
      #     cp /home/runner/work/RiftCore/RiftCore/tb/dhrystone/crt.S ./
      #     cp /home/runner/work/RiftCore/RiftCore/tb/dhrystone/syscalls.c ./
      #     cd ../dhrystone
      #     rm dhrystone_main.c
      #     cp /home/runner/work/RiftCore/RiftCore/tb/dhrystone/dhrystone_main.c ./
      #     cd ~/riscv-tests/benchmarks
      #     make all

      # - name: Test ISA
      #   run: |
      #     export PATH=$PATH:~/bin
      #     export RISCV=~/RISCV
      #     export PATH=$PATH:$RISCV/bin
      #     cd ~/riscv-tests/isa
      #     cp *.verilog /home/runner/work/RiftCore/RiftCore/tb/ci/
      #     cd /home/runner/work/RiftCore/RiftCore/tb
      #     export PATH=$PATH:~/bin
      #     python CI.py
  
      # - name: Restore Data
      #   run: |
      #     cd /home/runner/work/RiftCore/RiftCore/
      #     git fetch --all
      #     git checkout origin/gh-pages data/performance.js
      #     cp data/performance.js tb/ci/
      #     cp ~/riscv-tests/benchmarks/*.verilog tb/ci/

      # - name: Run Dhrystone
      #   run: |
      #     export PATH=$PATH:~/bin
      #     cd /home/runner/work/RiftCore/RiftCore/tb  
      #     python DS.py    

      # - name: Commit
      #   run: |
      #     cd ~
      #     mkdir ./data
      #     mv /home/runner/work/RiftCore/RiftCore/tb/ci/*.json ~/data/
      #     mv /home/runner/work/RiftCore/RiftCore/tb/ci/performance.js ~/data/
      #     cd /home/runner/work/RiftCore/RiftCore
      #     git checkout -- .
      #     git fetch --all
      #     git checkout gh-pages
      #     rm /home/runner/work/RiftCore/RiftCore/data/*.json
      #     rm /home/runner/work/RiftCore/RiftCore/data/performance.js
      #     cp ~/data/* /home/runner/work/RiftCore/RiftCore/data/
      #     git config --local user.email "action@github.com"
      #     git config --local user.name "GitHub Action"
      #     git add ./data
      #     git commit -m "update ci result"
 
      # - name: push
      #   uses: ad-m/github-push-action@master
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: gh-pages
      #     force: true




      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

# verilator version
verilator      ?= verilator
R2        ?= ${R2}



aluisa += rv64ui-p-add
aluisa += rv64ui-v-add
aluisa += rv64ui-p-addi
aluisa += rv64ui-v-addi
aluisa += rv64ui-p-addiw
aluisa += rv64ui-v-addiw
aluisa += rv64ui-p-addw
aluisa += rv64ui-v-addw
aluisa += rv64ui-p-and
aluisa += rv64ui-v-and
aluisa += rv64ui-p-andi
aluisa += rv64ui-v-andi
aluisa += rv64ui-p-auipc
aluisa += rv64ui-v-auipc
aluisa += rv64ui-p-or
aluisa += rv64ui-v-or
aluisa += rv64ui-p-ori
aluisa += rv64ui-v-ori
aluisa += rv64ui-p-sll
aluisa += rv64ui-v-sll
aluisa += rv64ui-p-slli
aluisa += rv64ui-v-slli
aluisa += rv64ui-p-slliw
aluisa += rv64ui-v-slliw
aluisa += rv64ui-p-sllw
aluisa += rv64ui-v-sllw
aluisa += rv64ui-p-slt
aluisa += rv64ui-v-slt
aluisa += rv64ui-p-slti
aluisa += rv64ui-v-slti
aluisa += rv64ui-p-sltiu
aluisa += rv64ui-v-sltiu
aluisa += rv64ui-p-sltu
aluisa += rv64ui-v-sltu
aluisa += rv64ui-p-sra
aluisa += rv64ui-v-sra
aluisa += rv64ui-p-srai
aluisa += rv64ui-v-srai
aluisa += rv64ui-p-sraiw
aluisa += rv64ui-v-sraiw
aluisa += rv64ui-p-sraw
aluisa += rv64ui-v-sraw
aluisa += rv64ui-p-srl
aluisa += rv64ui-v-srl
aluisa += rv64ui-p-srli
aluisa += rv64ui-v-srli
aluisa += rv64ui-p-srliw
aluisa += rv64ui-v-srliw
aluisa += rv64ui-p-srlw
aluisa += rv64ui-v-srlw
aluisa += rv64ui-p-sub
aluisa += rv64ui-v-sub
aluisa += rv64ui-p-subw
aluisa += rv64ui-v-subw
aluisa += rv64ui-p-xor
aluisa += rv64ui-v-xor
aluisa += rv64ui-p-xori
aluisa += rv64ui-v-xori

bruisa += rv64mi-p-ma_addr
bruisa += rv64mi-p-ma_fetch
bruisa += rv64si-p-ma_fetch
bruisa += rv64ui-p-beq
bruisa += rv64ui-v-beq
bruisa += rv64ui-p-bge
bruisa += rv64ui-v-bge
bruisa += rv64ui-p-bgeu
bruisa += rv64ui-v-bgeu
bruisa += rv64ui-p-blt
bruisa += rv64ui-v-blt
bruisa += rv64ui-p-bltu
bruisa += rv64ui-v-bltu
bruisa += rv64ui-p-bne
bruisa += rv64ui-v-bne
bruisa += rv64ui-p-jal
bruisa += rv64ui-v-jal
bruisa += rv64ui-p-jalr
bruisa += rv64ui-v-jalr

lsuisa += rv64ui-p-fence_i
lsuisa += rv64ui-v-fence_i
lsuisa += rv64ui-p-lb
lsuisa += rv64ui-v-lb
lsuisa += rv64ui-p-lbu
lsuisa += rv64ui-v-lbu
lsuisa += rv64ui-p-ld
lsuisa += rv64ui-v-ld
lsuisa += rv64ui-p-lh
lsuisa += rv64ui-v-lh
lsuisa += rv64ui-p-lhu
lsuisa += rv64ui-v-lhu
lsuisa += rv64ui-p-lui
lsuisa += rv64ui-v-lui
lsuisa += rv64ui-p-lw
lsuisa += rv64ui-v-lw
lsuisa += rv64ui-p-lwu
lsuisa += rv64ui-v-lwu
lsuisa += rv64ui-p-sb
lsuisa += rv64ui-v-sb
lsuisa += rv64ui-p-sd
lsuisa += rv64ui-v-sd
lsuisa += rv64ui-p-sh
lsuisa += rv64ui-v-sh
lsuisa += rv64ui-p-sw
lsuisa += rv64ui-v-sw
lsuisa += rv64ua-p-amoadd_d
lsuisa += rv64ua-v-amoadd_d
lsuisa += rv64ua-p-amoadd_w
lsuisa += rv64ua-v-amoadd_w
lsuisa += rv64ua-p-amoand_d
lsuisa += rv64ua-v-amoand_d
lsuisa += rv64ua-p-amoand_w
lsuisa += rv64ua-v-amoand_w
lsuisa += rv64ua-p-amomax_d
lsuisa += rv64ua-v-amomax_d
lsuisa += rv64ua-p-amomax_w
lsuisa += rv64ua-v-amomax_w
lsuisa += rv64ua-p-amomaxu_d
lsuisa += rv64ua-v-amomaxu_d
lsuisa += rv64ua-p-amomaxu_w
lsuisa += rv64ua-v-amomaxu_w
lsuisa += rv64ua-p-amomin_d
lsuisa += rv64ua-v-amomin_d
lsuisa += rv64ua-p-amomin_w
lsuisa += rv64ua-v-amomin_w
lsuisa += rv64ua-p-amominu_d
lsuisa += rv64ua-v-amominu_d
lsuisa += rv64ua-p-amominu_w
lsuisa += rv64ua-v-amominu_w
lsuisa += rv64ua-p-amoor_d
lsuisa += rv64ua-v-amoor_d
lsuisa += rv64ua-p-amoor_w
lsuisa += rv64ua-v-amoor_w
lsuisa += rv64ua-p-amoswap_d
lsuisa += rv64ua-v-amoswap_d
lsuisa += rv64ua-p-amoswap_w
lsuisa += rv64ua-v-amoswap_w
lsuisa += rv64ua-p-amoxor_d
lsuisa += rv64ua-v-amoxor_d
lsuisa += rv64ua-p-amoxor_w
lsuisa += rv64ua-v-amoxor_w
lsuisa += rv64ua-p-lrsc
lsuisa += rv64ua-v-lrsc
lsuisa += rv64uc-p-rvc
lsuisa += rv64uc-v-rvc

# isa += rv64ui-p-simple
# isa += rv64ui-v-simple

mulisa += rv64um-p-div
mulisa += rv64um-v-div
mulisa += rv64um-p-divu
mulisa += rv64um-v-divu
mulisa += rv64um-p-divuw
mulisa += rv64um-v-divuw
mulisa += rv64um-p-divw
mulisa += rv64um-v-divw
mulisa += rv64um-p-mul
mulisa += rv64um-v-mul
mulisa += rv64um-p-mulh
mulisa += rv64um-v-mulh
mulisa += rv64um-p-mulhsu
mulisa += rv64um-v-mulhsu
mulisa += rv64um-p-mulhu
mulisa += rv64um-v-mulhu
mulisa += rv64um-p-mulw
mulisa += rv64um-v-mulw
mulisa += rv64um-p-rem
mulisa += rv64um-v-rem
mulisa += rv64um-p-remu
mulisa += rv64um-v-remu
mulisa += rv64um-p-remuw
mulisa += rv64um-v-remuw
mulisa += rv64um-p-remw
mulisa += rv64um-v-remw

privisa += rv64mi-p-access
privisa += rv64mi-p-breakpoint
privisa += rv64mi-p-csr
privisa += rv64mi-p-illegal
privisa += rv64mi-p-mcsr
privisa += rv64mi-p-sbreak
privisa += rv64mi-p-scall
privisa += rv64si-p-csr
privisa += rv64si-p-dirty
privisa += rv64si-p-icache-alias
privisa += rv64si-p-sbreak
privisa += rv64si-p-scall
privisa += rv64si-p-wfi
    



# isa += rv64ssvnapot-p-napot

fpuisa += rv64ud-p-fadd
fpuisa += rv64ud-v-fadd
fpuisa += rv64ud-p-fclass
fpuisa += rv64ud-v-fclass
fpuisa += rv64ud-p-fcmp
fpuisa += rv64ud-v-fcmp
fpuisa += rv64ud-p-fcvt
fpuisa += rv64ud-v-fcvt
fpuisa += rv64ud-p-fcvt_w
fpuisa += rv64ud-v-fcvt_w
fpuisa += rv64ud-p-fdiv
fpuisa += rv64ud-v-fdiv
fpuisa += rv64ud-p-fmadd
fpuisa += rv64ud-v-fmadd
fpuisa += rv64ud-p-fmin
fpuisa += rv64ud-v-fmin
fpuisa += rv64ud-p-ldst
fpuisa += rv64ud-v-ldst
fpuisa += rv64ud-p-move
fpuisa += rv64ud-v-move
fpuisa += rv64ud-p-recoding
fpuisa += rv64ud-v-recoding
fpuisa += rv64ud-p-structural
fpuisa += rv64ud-v-structural
fpuisa += rv64uf-p-fadd
fpuisa += rv64uf-v-fadd
fpuisa += rv64uf-p-fclass
fpuisa += rv64uf-v-fclass
fpuisa += rv64uf-p-fcmp
fpuisa += rv64uf-v-fcmp
fpuisa += rv64uf-p-fcvt
fpuisa += rv64uf-v-fcvt
fpuisa += rv64uf-p-fcvt_w
fpuisa += rv64uf-v-fcvt_w
fpuisa += rv64uf-p-fdiv
fpuisa += rv64uf-v-fdiv
fpuisa += rv64uf-p-fmadd
fpuisa += rv64uf-v-fmadd
fpuisa += rv64uf-p-fmin
fpuisa += rv64uf-v-fmin
fpuisa += rv64uf-p-ldst
fpuisa += rv64uf-v-ldst
fpuisa += rv64uf-p-move
fpuisa += rv64uf-v-move
fpuisa += rv64uf-p-recoding
fpuisa += rv64uf-v-recoding

isa ?= $(aluisa) $(bruisa) $(lsuisa) $(mulisa) $(privisa) $(fpuisa)
# isa ?= $(lsuisa) 

.DEFAULT_GOAL = unit

.PHONY: unit clean torture



clean:
	rm -f ./build/*.cpp
	rm -f ./build/*.o
	rm -f ./build/*.d
	rm -f ./build/*.h
	rm -f ./build/*.mk
	rm -f ./build/*.a


VSimTop: 
	rm -f ./build/*.cpp
	rm -f ./build/*.o
	rm -f ./build/*.d
	rm -f ./build/*.h
	rm -f ./build/*.mk
	rm -f ./build/*.a
	verilator -Wno-fatal  \
	--timescale "1 ns / 1 ps" \
	-y ${R2}/generated/ \
	-y ${R2}/tb/ \
	-y ${R2}/tb/vtb/ \
	--top-module SimTop \
	--trace \
	-LDFLAGS -ldromajo_cosim \
	--cc ${R2}/tb/verilator/SimTop.v  \
	--exe --build \
	./verilator/sim_main.cpp  \
	./verilator/diff.cpp \
	-Mdir build \
	-j 128
# 	rm ./obj_dir/*.d ./obj_dir/*.o ./obj_dir/*.cpp






# ifeq ( $(TESTISA), aluisa )
# 	isa = $(aluisa)
# endif

# ifeq ( $(TESTISA), bruisa )
# 	isa = $(bruisa)
# endif

# ifeq ( $(TESTISA), lsuisa )
# 	isa = $(lsuisa)
# endif

# ifeq ( $(TESTISA), mulisa )
# 	isa = $(mulisa)
# endif

# ifeq ( $(TESTISA), privisa )
# 	isa = $(privisa)
# endif

# ifeq ( $(TESTISA), fpuisa )
# 	isa = $(fpuisa)
# endif

unit: VSimTop
	$(foreach test, $(isa), ./build/VSimTop -l -f ./ci/$(test); )


# TESTFILE ?= rv64ui-p-add
single: VSimTop
	./build/VSimTop -w -d -l -p -f ./ci/$(TESTFILE)

torture:
	./build/VSimTop -w -d -l -p -f ./torture/output/test

dromajo:
	verilator -Wno-fatal  \
	--timescale "1 ns / 1 ns" \
	-y ${R2}/generated/ \
	-y ${R2}/tb/ \
	-y ${R2}/tb/vtb/ \
	--top-module test \
	--trace \
	-LDFLAGS -ldromajo_cosim \
	--cc ${R2}/tb/verilator/test.v  \
	--exe --build \
	./verilator/dromajo.cpp  \
	./verilator/diff.cpp \
	-I./verilator \
	-Mdir build \
	-j 8

dhrystone5: VSimTop
	./build/VSimTop -w -p -f  ./ci/dhrystone5.riscv

dhrystone500: VSimTop
	./build/VSimTop -p -f ./ci/dhrystone500.riscv


coremark: VSimTop
	./build/VSimTop -w -p -f ./ci/coremark1_bare

wave:
	gtkwave ./build/wave.vcd &



module:
	verilator -Wno-fatal  \
	--timescale "1 ns / 1 ps" \
	-y ${R2}/generated/ \
	-y ${R2}/tb/verilator/mdl_test/ \
	-y ${R2}/tb/ \
	-y ${R2}/tb/vtb/ \
	-y ${R2}/tb/vtb/ \
	--top-module $(TOP) \
	--trace \
	--cc ${R2}/tb/verilator/mdl_test/$(TOP).v  \
	--exe --build \
	./verilator/mdl_test/$(TOP).cpp  \
	-Mdir build \
	-j 8

	./build/V$(TOP)


VSimDebugger: 
	rm -f ./build/*.cpp
	rm -f ./build/*.o
	rm -f ./build/*.d
	rm -f ./build/*.h
	rm -f ./build/*.mk
	rm -f ./build/*.a
	verilator -Wno-fatal  \
	--timescale "1 ns / 1 ps" \
	-O3 \
	--x-assign fast \
	--x-initial fast \
	--threads 30 \
	-y ${R2}/generated/ \
	-y ${R2}/tb/ \
	-y ${R2}/tb/vtb/ \
	--top-module SimTop \
	--trace \
	-LDFLAGS -ldromajo_cosim \
	--cc ${R2}/tb/debugger/SimTop.v  \
	--exe --build \
	./debugger/sim_main.cpp  \
	./verilator/diff.cpp \
	./debugger/SimJTAG.cc \
	./debugger/remote_bitbang.cc \
	-Mdir build \
	-j 128

	